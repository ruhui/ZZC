package com.zzcar.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zzcar.zzc.networks.responses.CarSeriesResponse;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CAR_SERIES_RESPONSE".
*/
public class CarSeriesResponseDao extends AbstractDao<CarSeriesResponse, Long> {

    public static final String TABLENAME = "CAR_SERIES_RESPONSE";

    /**
     * Properties of entity CarSeriesResponse.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Bland_id = new Property(1, long.class, "bland_id", false, "BLAND_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property First_letter = new Property(3, String.class, "first_letter", false, "FIRST_LETTER");
    }

    private DaoSession daoSession;


    public CarSeriesResponseDao(DaoConfig config) {
        super(config);
    }
    
    public CarSeriesResponseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CAR_SERIES_RESPONSE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"BLAND_ID\" INTEGER NOT NULL ," + // 1: bland_id
                "\"NAME\" TEXT," + // 2: name
                "\"FIRST_LETTER\" TEXT);"); // 3: first_letter
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CAR_SERIES_RESPONSE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CarSeriesResponse entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getBland_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String first_letter = entity.getFirst_letter();
        if (first_letter != null) {
            stmt.bindString(4, first_letter);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CarSeriesResponse entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getBland_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String first_letter = entity.getFirst_letter();
        if (first_letter != null) {
            stmt.bindString(4, first_letter);
        }
    }

    @Override
    protected final void attachEntity(CarSeriesResponse entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CarSeriesResponse readEntity(Cursor cursor, int offset) {
        CarSeriesResponse entity = new CarSeriesResponse( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // bland_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // first_letter
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CarSeriesResponse entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setBland_id(cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFirst_letter(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CarSeriesResponse entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CarSeriesResponse entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CarSeriesResponse entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
