package com.zzcar.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.zzcar.zzc.models.CarfactoryDto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARFACTORY_DTO".
*/
public class CarfactoryDtoDao extends AbstractDao<CarfactoryDto, Long> {

    public static final String TABLENAME = "CARFACTORY_DTO";

    /**
     * Properties of entity CarfactoryDto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Factory_id = new Property(1, long.class, "factory_id", false, "FACTORY_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property State = new Property(3, int.class, "state", false, "STATE");
        public final static Property Sort = new Property(4, int.class, "sort", false, "SORT");
    }

    private Query<CarfactoryDto> carSeriesResponse_SeriesQuery;

    public CarfactoryDtoDao(DaoConfig config) {
        super(config);
    }
    
    public CarfactoryDtoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARFACTORY_DTO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"FACTORY_ID\" INTEGER NOT NULL ," + // 1: factory_id
                "\"NAME\" TEXT," + // 2: name
                "\"STATE\" INTEGER NOT NULL ," + // 3: state
                "\"SORT\" INTEGER NOT NULL );"); // 4: sort
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARFACTORY_DTO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CarfactoryDto entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getFactory_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getState());
        stmt.bindLong(5, entity.getSort());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CarfactoryDto entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getFactory_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getState());
        stmt.bindLong(5, entity.getSort());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CarfactoryDto readEntity(Cursor cursor, int offset) {
        CarfactoryDto entity = new CarfactoryDto( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // factory_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // state
            cursor.getInt(offset + 4) // sort
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CarfactoryDto entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setFactory_id(cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setState(cursor.getInt(offset + 3));
        entity.setSort(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CarfactoryDto entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CarfactoryDto entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CarfactoryDto entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "series" to-many relationship of CarSeriesResponse. */
    public List<CarfactoryDto> _queryCarSeriesResponse_Series(long factory_id) {
        synchronized (this) {
            if (carSeriesResponse_SeriesQuery == null) {
                QueryBuilder<CarfactoryDto> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Factory_id.eq(null));
                carSeriesResponse_SeriesQuery = queryBuilder.build();
            }
        }
        Query<CarfactoryDto> query = carSeriesResponse_SeriesQuery.forCurrentThread();
        query.setParameter(0, factory_id);
        return query.list();
    }

}
